{"ast":null,"code":"import{collection,doc,setDoc,getDocs,updateDoc,query,where,orderBy,onSnapshot,Timestamp}from'firebase/firestore';import{ref,uploadBytes,getDownloadURL}from'firebase/storage';import{db,storage}from'./firebase';export class FirestoreService{// Save request to Firestore\nstatic async saveRequest(request){try{await setDoc(doc(db,'requests',request.id),{userId:request.userId,amount:request.amount,description:request.description,category:request.category||'',status:request.status,imageURL:request.imageURL||'',createdAt:request.createdAt,updatedAt:request.updatedAt});}catch(error){throw new Error(\"Failed to save request: \".concat(error));}}// Update request status\nstatic async updateRequestStatus(requestId,status){try{await updateDoc(doc(db,'requests',requestId),{status,updatedAt:new Date()});}catch(error){throw new Error(\"Failed to update request status: \".concat(error));}}// Get requests for a specific user\nstatic async getRequestsForUser(userId){try{const q=query(collection(db,'requests'),where('userId','==',userId),orderBy('createdAt','desc'));const snapshot=await getDocs(q);return snapshot.docs.map(doc=>this.parseRequest(doc.id,doc.data()));}catch(error){throw new Error(\"Failed to get user requests: \".concat(error));}}// Get all requests (for treasurers)\nstatic async getAllRequests(){try{const q=query(collection(db,'requests'),orderBy('createdAt','desc'));const snapshot=await getDocs(q);return snapshot.docs.map(doc=>this.parseRequest(doc.id,doc.data()));}catch(error){throw new Error(\"Failed to get all requests: \".concat(error));}}// Real-time listener for requests\nstatic subscribeToRequests(callback,userId){const q=userId?query(collection(db,'requests'),where('userId','==',userId),orderBy('createdAt','desc')):query(collection(db,'requests'),orderBy('createdAt','desc'));return onSnapshot(q,snapshot=>{const requests=snapshot.docs.map(doc=>this.parseRequest(doc.id,doc.data()));callback(requests);});}// Upload image to Firebase Storage\nstatic async uploadImage(file,requestId){try{const storageRef=ref(storage,\"receipts/\".concat(requestId,\".jpg\"));const snapshot=await uploadBytes(storageRef,file);const downloadURL=await getDownloadURL(snapshot.ref);return downloadURL;}catch(error){throw new Error(\"Failed to upload image: \".concat(error));}}// Parse Firestore document to ReimbursementRequest\nstatic parseRequest(id,data){return{id,userId:data.userId,amount:data.amount,description:data.description,category:data.category||undefined,status:data.status,imageURL:data.imageURL||undefined,createdAt:data.createdAt instanceof Timestamp?data.createdAt.toDate():data.createdAt,updatedAt:data.updatedAt instanceof Timestamp?data.updatedAt.toDate():data.updatedAt};}// Generate unique request ID\nstatic generateRequestId(){return Math.random().toString(36).substr(2,9);}}","map":{"version":3,"names":["collection","doc","setDoc","getDocs","updateDoc","query","where","orderBy","onSnapshot","Timestamp","ref","uploadBytes","getDownloadURL","db","storage","FirestoreService","saveRequest","request","id","userId","amount","description","category","status","imageURL","createdAt","updatedAt","error","Error","concat","updateRequestStatus","requestId","Date","getRequestsForUser","q","snapshot","docs","map","parseRequest","data","getAllRequests","subscribeToRequests","callback","requests","uploadImage","file","storageRef","downloadURL","undefined","toDate","generateRequestId","Math","random","toString","substr"],"sources":["/Users/carl/Documents/Personal/CS Projects/Beta Treasurer App/BetaMoney/src/services/firestoreService.ts"],"sourcesContent":["import { \n  collection, \n  doc, \n  setDoc, \n  getDocs, \n  updateDoc, \n  query, \n  where, \n  orderBy,\n  onSnapshot,\n  Timestamp\n} from 'firebase/firestore';\nimport { ref, uploadBytes, getDownloadURL } from 'firebase/storage';\nimport { db, storage } from './firebase';\nimport { ReimbursementRequest, RequestStatus } from '../types';\n\nexport class FirestoreService {\n  // Save request to Firestore\n  static async saveRequest(request: ReimbursementRequest): Promise<void> {\n    try {\n      await setDoc(doc(db, 'requests', request.id), {\n        userId: request.userId,\n        amount: request.amount,\n        description: request.description,\n        category: request.category || '',\n        status: request.status,\n        imageURL: request.imageURL || '',\n        createdAt: request.createdAt,\n        updatedAt: request.updatedAt\n      });\n    } catch (error) {\n      throw new Error(`Failed to save request: ${error}`);\n    }\n  }\n  \n  // Update request status\n  static async updateRequestStatus(requestId: string, status: RequestStatus): Promise<void> {\n    try {\n      await updateDoc(doc(db, 'requests', requestId), {\n        status,\n        updatedAt: new Date()\n      });\n    } catch (error) {\n      throw new Error(`Failed to update request status: ${error}`);\n    }\n  }\n  \n  // Get requests for a specific user\n  static async getRequestsForUser(userId: string): Promise<ReimbursementRequest[]> {\n    try {\n      const q = query(\n        collection(db, 'requests'),\n        where('userId', '==', userId),\n        orderBy('createdAt', 'desc')\n      );\n      \n      const snapshot = await getDocs(q);\n      return snapshot.docs.map(doc => this.parseRequest(doc.id, doc.data()));\n    } catch (error) {\n      throw new Error(`Failed to get user requests: ${error}`);\n    }\n  }\n  \n  // Get all requests (for treasurers)\n  static async getAllRequests(): Promise<ReimbursementRequest[]> {\n    try {\n      const q = query(\n        collection(db, 'requests'),\n        orderBy('createdAt', 'desc')\n      );\n      \n      const snapshot = await getDocs(q);\n      return snapshot.docs.map(doc => this.parseRequest(doc.id, doc.data()));\n    } catch (error) {\n      throw new Error(`Failed to get all requests: ${error}`);\n    }\n  }\n  \n  // Real-time listener for requests\n  static subscribeToRequests(\n    callback: (requests: ReimbursementRequest[]) => void,\n    userId?: string\n  ): () => void {\n    const q = userId \n      ? query(\n          collection(db, 'requests'),\n          where('userId', '==', userId),\n          orderBy('createdAt', 'desc')\n        )\n      : query(\n          collection(db, 'requests'),\n          orderBy('createdAt', 'desc')\n        );\n    \n    return onSnapshot(q, (snapshot) => {\n      const requests = snapshot.docs.map(doc => this.parseRequest(doc.id, doc.data()));\n      callback(requests);\n    });\n  }\n  \n  // Upload image to Firebase Storage\n  static async uploadImage(file: File, requestId: string): Promise<string> {\n    try {\n      const storageRef = ref(storage, `receipts/${requestId}.jpg`);\n      const snapshot = await uploadBytes(storageRef, file);\n      const downloadURL = await getDownloadURL(snapshot.ref);\n      return downloadURL;\n    } catch (error) {\n      throw new Error(`Failed to upload image: ${error}`);\n    }\n  }\n  \n  // Parse Firestore document to ReimbursementRequest\n  private static parseRequest(id: string, data: any): ReimbursementRequest {\n    return {\n      id,\n      userId: data.userId,\n      amount: data.amount,\n      description: data.description,\n      category: data.category || undefined,\n      status: data.status,\n      imageURL: data.imageURL || undefined,\n      createdAt: data.createdAt instanceof Timestamp ? data.createdAt.toDate() : data.createdAt,\n      updatedAt: data.updatedAt instanceof Timestamp ? data.updatedAt.toDate() : data.updatedAt\n    };\n  }\n  \n  // Generate unique request ID\n  static generateRequestId(): string {\n    return Math.random().toString(36).substr(2, 9);\n  }\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}