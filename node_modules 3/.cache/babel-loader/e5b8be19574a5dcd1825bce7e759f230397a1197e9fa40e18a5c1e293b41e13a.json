{"ast":null,"code":"import{signInWithEmailAndPassword,signInAnonymously,signOut}from'firebase/auth';import{doc,getDoc,setDoc}from'firebase/firestore';import{auth,db}from'./firebase';import{UserRole}from'../types';import{TREASURER_CREDENTIALS}from'../constants';export class AuthService{// Guest sign-in (simplified - in production would use email link)\nstatic async signInAsGuest(email,name){try{// Create anonymous user for demo purposes\nconst result=await signInAnonymously(auth);const firebaseUser=result.user;// Create guest user profile\nconst user={id:firebaseUser.uid,email,name,role:UserRole.GUEST,createdAt:new Date()};// Save to Firestore\nawait this.saveUser(user);return user;}catch(error){throw new Error(\"Failed to sign in as guest: \".concat(error));}}// Owner/Treasurer sign-in\nstatic async signInAsTreasurer(email,password){try{// Check hard-coded credentials\nif(email!==TREASURER_CREDENTIALS.EMAIL||password!==TREASURER_CREDENTIALS.PASSWORD){throw new Error('Invalid treasurer credentials');}const result=await signInWithEmailAndPassword(auth,email,password);const firebaseUser=result.user;// Create or get treasurer user profile\nconst user={id:firebaseUser.uid,email,name:'Treasurer',role:UserRole.OWNER,createdAt:new Date()};// Save to Firestore\nawait this.saveUser(user);return user;}catch(error){throw new Error(\"Failed to sign in as treasurer: \".concat(error));}}// Sign out\nstatic async signOutUser(){try{await signOut(auth);}catch(error){throw new Error(\"Failed to sign out: \".concat(error));}}// Get current user from Firestore\nstatic async getCurrentUser(firebaseUser){try{const userDoc=await getDoc(doc(db,'users',firebaseUser.uid));if(userDoc.exists()){const data=userDoc.data();return{id:firebaseUser.uid,email:data.email,name:data.name,role:data.role,createdAt:data.createdAt.toDate()};}return null;}catch(error){throw new Error(\"Failed to get current user: \".concat(error));}}// Save user to Firestore\nstatic async saveUser(user){try{await setDoc(doc(db,'users',user.id),{email:user.email,name:user.name,role:user.role,createdAt:user.createdAt});}catch(error){throw new Error(\"Failed to save user: \".concat(error));}}}","map":{"version":3,"names":["signInWithEmailAndPassword","signInAnonymously","signOut","doc","getDoc","setDoc","auth","db","UserRole","TREASURER_CREDENTIALS","AuthService","signInAsGuest","email","name","result","firebaseUser","user","id","uid","role","GUEST","createdAt","Date","saveUser","error","Error","concat","signInAsTreasurer","password","EMAIL","PASSWORD","OWNER","signOutUser","getCurrentUser","userDoc","exists","data","toDate"],"sources":["/Users/carl/Documents/Personal/CS Projects/Beta Treasurer App/BetaMoney/src/services/authService.ts"],"sourcesContent":["import { \n  signInWithEmailAndPassword, \n  signInAnonymously, \n  signOut,\n  User as FirebaseUser\n} from 'firebase/auth';\nimport { doc, getDoc, setDoc } from 'firebase/firestore';\nimport { auth, db } from './firebase';\nimport { User, UserRole } from '../types';\nimport { TREASURER_CREDENTIALS } from '../constants';\n\nexport class AuthService {\n  // Guest sign-in (simplified - in production would use email link)\n  static async signInAsGuest(email: string, name: string): Promise<User> {\n    try {\n      // Create anonymous user for demo purposes\n      const result = await signInAnonymously(auth);\n      const firebaseUser = result.user;\n      \n      // Create guest user profile\n      const user: User = {\n        id: firebaseUser.uid,\n        email,\n        name,\n        role: UserRole.GUEST,\n        createdAt: new Date()\n      };\n      \n      // Save to Firestore\n      await this.saveUser(user);\n      \n      return user;\n    } catch (error) {\n      throw new Error(`Failed to sign in as guest: ${error}`);\n    }\n  }\n  \n  // Owner/Treasurer sign-in\n  static async signInAsTreasurer(email: string, password: string): Promise<User> {\n    try {\n      // Check hard-coded credentials\n      if (email !== TREASURER_CREDENTIALS.EMAIL || password !== TREASURER_CREDENTIALS.PASSWORD) {\n        throw new Error('Invalid treasurer credentials');\n      }\n      \n      const result = await signInWithEmailAndPassword(auth, email, password);\n      const firebaseUser = result.user;\n      \n      // Create or get treasurer user profile\n      const user: User = {\n        id: firebaseUser.uid,\n        email,\n        name: 'Treasurer',\n        role: UserRole.OWNER,\n        createdAt: new Date()\n      };\n      \n      // Save to Firestore\n      await this.saveUser(user);\n      \n      return user;\n    } catch (error) {\n      throw new Error(`Failed to sign in as treasurer: ${error}`);\n    }\n  }\n  \n  // Sign out\n  static async signOutUser(): Promise<void> {\n    try {\n      await signOut(auth);\n    } catch (error) {\n      throw new Error(`Failed to sign out: ${error}`);\n    }\n  }\n  \n  // Get current user from Firestore\n  static async getCurrentUser(firebaseUser: FirebaseUser): Promise<User | null> {\n    try {\n      const userDoc = await getDoc(doc(db, 'users', firebaseUser.uid));\n      \n      if (userDoc.exists()) {\n        const data = userDoc.data();\n        return {\n          id: firebaseUser.uid,\n          email: data.email,\n          name: data.name,\n          role: data.role,\n          createdAt: data.createdAt.toDate()\n        };\n      }\n      \n      return null;\n    } catch (error) {\n      throw new Error(`Failed to get current user: ${error}`);\n    }\n  }\n  \n  // Save user to Firestore\n  private static async saveUser(user: User): Promise<void> {\n    try {\n      await setDoc(doc(db, 'users', user.id), {\n        email: user.email,\n        name: user.name,\n        role: user.role,\n        createdAt: user.createdAt\n      });\n    } catch (error) {\n      throw new Error(`Failed to save user: ${error}`);\n    }\n  }\n} "],"mappings":"AAAA,OACEA,0BAA0B,CAC1BC,iBAAiB,CACjBC,OAAO,KAEF,eAAe,CACtB,OAASC,GAAG,CAAEC,MAAM,CAAEC,MAAM,KAAQ,oBAAoB,CACxD,OAASC,IAAI,CAAEC,EAAE,KAAQ,YAAY,CACrC,OAAeC,QAAQ,KAAQ,UAAU,CACzC,OAASC,qBAAqB,KAAQ,cAAc,CAEpD,MAAO,MAAM,CAAAC,WAAY,CACvB;AACA,YAAa,CAAAC,aAAaA,CAACC,KAAa,CAAEC,IAAY,CAAiB,CACrE,GAAI,CACF;AACA,KAAM,CAAAC,MAAM,CAAG,KAAM,CAAAb,iBAAiB,CAACK,IAAI,CAAC,CAC5C,KAAM,CAAAS,YAAY,CAAGD,MAAM,CAACE,IAAI,CAEhC;AACA,KAAM,CAAAA,IAAU,CAAG,CACjBC,EAAE,CAAEF,YAAY,CAACG,GAAG,CACpBN,KAAK,CACLC,IAAI,CACJM,IAAI,CAAEX,QAAQ,CAACY,KAAK,CACpBC,SAAS,CAAE,GAAI,CAAAC,IAAI,CAAC,CACtB,CAAC,CAED;AACA,KAAM,KAAI,CAACC,QAAQ,CAACP,IAAI,CAAC,CAEzB,MAAO,CAAAA,IAAI,CACb,CAAE,MAAOQ,KAAK,CAAE,CACd,KAAM,IAAI,CAAAC,KAAK,gCAAAC,MAAA,CAAgCF,KAAK,CAAE,CAAC,CACzD,CACF,CAEA;AACA,YAAa,CAAAG,iBAAiBA,CAACf,KAAa,CAAEgB,QAAgB,CAAiB,CAC7E,GAAI,CACF;AACA,GAAIhB,KAAK,GAAKH,qBAAqB,CAACoB,KAAK,EAAID,QAAQ,GAAKnB,qBAAqB,CAACqB,QAAQ,CAAE,CACxF,KAAM,IAAI,CAAAL,KAAK,CAAC,+BAA+B,CAAC,CAClD,CAEA,KAAM,CAAAX,MAAM,CAAG,KAAM,CAAAd,0BAA0B,CAACM,IAAI,CAAEM,KAAK,CAAEgB,QAAQ,CAAC,CACtE,KAAM,CAAAb,YAAY,CAAGD,MAAM,CAACE,IAAI,CAEhC;AACA,KAAM,CAAAA,IAAU,CAAG,CACjBC,EAAE,CAAEF,YAAY,CAACG,GAAG,CACpBN,KAAK,CACLC,IAAI,CAAE,WAAW,CACjBM,IAAI,CAAEX,QAAQ,CAACuB,KAAK,CACpBV,SAAS,CAAE,GAAI,CAAAC,IAAI,CAAC,CACtB,CAAC,CAED;AACA,KAAM,KAAI,CAACC,QAAQ,CAACP,IAAI,CAAC,CAEzB,MAAO,CAAAA,IAAI,CACb,CAAE,MAAOQ,KAAK,CAAE,CACd,KAAM,IAAI,CAAAC,KAAK,oCAAAC,MAAA,CAAoCF,KAAK,CAAE,CAAC,CAC7D,CACF,CAEA;AACA,YAAa,CAAAQ,WAAWA,CAAA,CAAkB,CACxC,GAAI,CACF,KAAM,CAAA9B,OAAO,CAACI,IAAI,CAAC,CACrB,CAAE,MAAOkB,KAAK,CAAE,CACd,KAAM,IAAI,CAAAC,KAAK,wBAAAC,MAAA,CAAwBF,KAAK,CAAE,CAAC,CACjD,CACF,CAEA;AACA,YAAa,CAAAS,cAAcA,CAAClB,YAA0B,CAAwB,CAC5E,GAAI,CACF,KAAM,CAAAmB,OAAO,CAAG,KAAM,CAAA9B,MAAM,CAACD,GAAG,CAACI,EAAE,CAAE,OAAO,CAAEQ,YAAY,CAACG,GAAG,CAAC,CAAC,CAEhE,GAAIgB,OAAO,CAACC,MAAM,CAAC,CAAC,CAAE,CACpB,KAAM,CAAAC,IAAI,CAAGF,OAAO,CAACE,IAAI,CAAC,CAAC,CAC3B,MAAO,CACLnB,EAAE,CAAEF,YAAY,CAACG,GAAG,CACpBN,KAAK,CAAEwB,IAAI,CAACxB,KAAK,CACjBC,IAAI,CAAEuB,IAAI,CAACvB,IAAI,CACfM,IAAI,CAAEiB,IAAI,CAACjB,IAAI,CACfE,SAAS,CAAEe,IAAI,CAACf,SAAS,CAACgB,MAAM,CAAC,CACnC,CAAC,CACH,CAEA,MAAO,KAAI,CACb,CAAE,MAAOb,KAAK,CAAE,CACd,KAAM,IAAI,CAAAC,KAAK,gCAAAC,MAAA,CAAgCF,KAAK,CAAE,CAAC,CACzD,CACF,CAEA;AACA,YAAqB,CAAAD,QAAQA,CAACP,IAAU,CAAiB,CACvD,GAAI,CACF,KAAM,CAAAX,MAAM,CAACF,GAAG,CAACI,EAAE,CAAE,OAAO,CAAES,IAAI,CAACC,EAAE,CAAC,CAAE,CACtCL,KAAK,CAAEI,IAAI,CAACJ,KAAK,CACjBC,IAAI,CAAEG,IAAI,CAACH,IAAI,CACfM,IAAI,CAAEH,IAAI,CAACG,IAAI,CACfE,SAAS,CAAEL,IAAI,CAACK,SAClB,CAAC,CAAC,CACJ,CAAE,MAAOG,KAAK,CAAE,CACd,KAAM,IAAI,CAAAC,KAAK,yBAAAC,MAAA,CAAyBF,KAAK,CAAE,CAAC,CAClD,CACF,CACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}